--sign extension unit----------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;

entity sext is
port(rst :in std_logic;
A : in std_logic_vector (15 downto 0);
O : out std_logic_vector (31 downto 0));
end sext;

architecture bhv of sext is
begin
process(A,rst)
begin
  if(rst = '1') then
     O<= "00000000000000000000000000000000";
   else
if (A(15) = '1') then
O <= "1111111111111111" & A;
elsif (A(15) = '0') then
O <= "0000000000000000" & A;
end if;
end if;
end process;
end bhv;

--32 bit register--------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
entity reg is
  port(rst: in std_logic;
    clk: in std_logic;
enable : in std_logic;
data : in std_logic_vector (31 downto 0);
O : out std_logic_vector (31 downto 0));
end reg;

architecture bhv of reg is
begin
process(clk)
variable temp:std_logic_vector (31 downto 0):="00000000000000000000000000000000";
begin
  if (rst ='1') then
    O<="00000000000000000000000000000000";
  else
    if(clk'event and clk ='1') then
      if enable='1' then
         O<=data;
         temp:=data;
      else
         O<=temp;
       end if;
end if;
end if;
end process;
end bhv;


--dest register--------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
entity reg_dest is
  port(
rst: in std_logic;
clk: in std_logic;
destin : in std_logic_vector (2 downto 0);
destoutfir: out std_logic_vector (2 downto 0);
destoutsec: out std_logic_vector (2 downto 0);
destoutthi: out std_logic_vector (2 downto 0)
);
end reg_dest;

architecture bhv of reg_dest is
begin
process(clk)
variable temp1:std_logic_vector (2 downto 0):="000";
variable temp2:std_logic_vector (2 downto 0):="000";
variable temp3:std_logic_vector (2 downto 0):="000";
begin
  if (rst ='1') then
    destoutfir<=temp1;
    destoutsec<=temp2;
    destoutthi<=temp3;
  else
      if(clk'event and clk ='1') then 
      temp3:=temp2;
      temp2:=temp1;
      temp1:=destin;
      destoutfir<=temp1;
      destoutsec<=temp2;
      destoutthi<=temp3;
    end if;
end if;
end process;
end bhv;

--8x32 register bank-----------------------------
LIBRARY IEEE;
use IEEE.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
entity register_file is
port(rst : in std_logic;
  clk: in std_logic;
DR_enable : in std_logic;
DR_address : in std_logic_vector (2 downto 0);
SR1_address: in std_logic_vector(2 downto 0);
SR2_address: in std_logic_vector(2 downto 0);
data_in: in std_logic_vector (31 downto 0);
SR1_out: out std_logic_vector (31 downto 0);
SR2_out: out std_logic_vector (31 downto 0);
r0: out std_logic_vector(31 downto 0);
r1: out std_logic_vector(31 downto 0);
r2: out std_logic_vector(31 downto 0);
r3: out std_logic_vector(31 downto 0);
r4: out std_logic_vector(31 downto 0);
r5: out std_logic_vector(31 downto 0);
r6: out std_logic_vector(31 downto 0);
r7: out std_logic_vector(31 downto 0)
);
end register_file;

architecture bhv of register_file is
type memory is array (0 to 7) of std_logic_vector(31 downto 0);
signal reg: memory;
begin
process(clk,rst,data_in)
variable temp:std_logic_vector (31 downto 0):="00000000000000000000000000000000";
begin
  if(rst = '1') then
    SR1_out<="00000000000000000000000000000000";
    SR2_out<="00000000000000000000000000000000";
    reg(0)<="00000000000000000000000000000000";
    reg(1)<="00000000000000000000000000000000";
    reg(2)<="00000000000000000000000000000000";
    reg(3)<="00000000000000000000000000000000";
    reg(4)<="00000000000000000000000000000000";
    reg(5)<="00000000000000000000000000000000";
    reg(6)<="00000000000000000000000000000000";
    reg(7)<="00000000000000000000000000000000";
  else
    SR1_out <= reg(conv_integer(SR1_address));
    SR2_out <= reg(conv_integer(SR2_address));
    if(DR_enable = '1') then
    reg(conv_integer(DR_address))<=data_in;
    end if;
end if;
end process;

process(clk)
  begin
    r0<= reg(0);
    r1<= reg(1);
    r2<= reg(2);
    r3<= reg(3);
    r4<= reg(4);
    r5<= reg(5);
    r6<= reg(6);
    r7<= reg(7);
  end process;
end bhv;

--LC-2 ALU---------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;

entity LC2_ALU is
port( rst : in std_logic;
A: in std_logic_vector (31 downto 0);
B: in std_logic_vector (31 downto 0);
S: in std_logic; --_vector (1 downto 0);
O: out std_logic_vector (31 downto 0);
EQ: out std_logic);
end LC2_ALU;

architecture bhv of LC2_ALU is
begin
process(A, B, S,rst)
begin
   if(rst ='1') then 
     O<="00000000000000000000000000000000";
     EQ<='0';
   else
case S is
when '0' => O <= A+B;
when '1' => O <= not (A and B);
when others => null;
end case;
if (A=B) then EQ <= '1';
else EQ <= '0';
end if;
end if;
end process;
end bhv;


